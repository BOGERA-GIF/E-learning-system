# Generated by Django 3.1 on 2021-06-21 12:31

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_admin', models.BooleanField(default=False, verbose_name='Is admin')),
                ('is_customer', models.BooleanField(default=False, verbose_name='Is customer')),
                ('is_employee', models.BooleanField(default=False, verbose_name='Is employee')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        
    ]
    
    # operations = [
    #     migrations.CreateModel(
    #         name='StudentRegistration',
    #         fields=[
    #             ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
    #             ('email', models.EmailField(max_length=254)),
    #             ('full_name', models.CharField(max_length=100)),
    #             ('date_of_birth', models.DateField()),
    #             ('school', models.CharField(max_length=100)),
    #             ('residence', models.CharField(max_length=100)),
    #             ('grade', models.CharField(max_length=100)),
    #             ('student_phone', models.CharField(blank=True, max_length=15, null=True)),
    #             ('code_camp', models.CharField(choices=[('Form 6 Vacationers Code Camp (Mar - July)', 'Form 6 Vacationers Code Camp (Mar - July)'), ('51st Code Camp (MAY)', '51st Code Camp (MAY)'), ('Private Class', 'Private Class'), ('Easter Break Code Camp', 'Easter Break Code Camp'), ('Artificial Intelligence (Saturdays)', 'Artificial Intelligence (Saturdays)'), ('Summer Code Camp', 'Summer Code Camp')], max_length=50)),
    #             ('mode_of_school', models.CharField(choices=[('Day', 'Day'), ('Boarding', 'Boarding')], max_length=50)),
    #             ('type_of_school', models.CharField(choices=[('National', 'National'), ('International', 'International'), ('Semi-International', 'Semi-International')], max_length=50)),
    #             ('course_module', models.CharField(choices=[('Scratch Beginners', 'Scratch Beginners'), ("2D Game Dev't with Scratch", "2D Game Dev't with Scratch"), ('Python Beginners', 'Python Beginners')], max_length=50)),
    #             ('preferred_class_type', models.CharField(choices=[("Private Physical at the Client's home", "Private Physical at the Client's home"), ('Private Physical at Academy Offices', 'Private Physical at Academy Offices'), ('Private Online (Via Zoom)', 'Private Online (Via Zoom)'), ('General Physical (ICT House)', 'General Physical (ICT House)'), ('General online (via Zoom)', 'General online (via Zoom)')], max_length=50)),
    #             ('next_term_start', models.DateField()),
    #             ('parent_full_name', models.CharField(max_length=100)),
    #             ('parent_title', models.CharField(choices=[('Mr.', 'Mr.'), ('Mrs.', 'Mrs.'), ('Ms.', 'Ms.'), ('Miss.', 'Miss.')], max_length=10)),
    #             ('parent_phone', models.CharField(max_length=15)),
    #             ('parent_occupation', models.CharField(max_length=100)),
    #             ('referral_source', models.CharField(choices=[('A Friend', 'A Friend'), ('Twitter', 'Twitter'), ('Facebook', 'Facebook'), ('Instagram', 'Instagram'), ('LinkedIn', 'LinkedIn'), ('WhatsApp', 'WhatsApp'), ('Google Search', 'Google Search'), ('Youtube', 'Youtube'), ('TikTok', 'TikTok'), ('From School', 'From School'), ('National Science Week 2023', 'National Science Week 2023'), ('Other', 'Other')], max_length=50)),
    #             ('referral_detail', models.CharField(blank=True, max_length=100, null=True)),
    #             ('agree_to_terms', models.BooleanField(default=False)),
    #         ],
    #     ),
    # ]

